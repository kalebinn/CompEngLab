MPASM  5.51                        P4_FIR.ASM   6-25-2019  16:53:28         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; P2 for QwikFlash board ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ;
                      00003 ; Use this template for Part 2 of Experiment 2
                      00004 ;
                      00005 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00006 ;
                      00007 ; Mainline
                      00008 ;   Initial
                      00009 ;
                      00010 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00011 
                      00012         list  P=PIC18F4520, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00013         #include <P18F4520.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4520 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01488         LIST
Warning[230]: __CONFIG has been deprecated for PIC18 devices.  Use directive CONFIG.
300000 F2FF           00014         __CONFIG  _CONFIG1H, _OSC_HS_1H  ;HS oscillator
Warning[230]: __CONFIG has been deprecated for PIC18 devices.  Use directive CONFIG.
                      00015         __CONFIG  _CONFIG2L, _PWRT_ON_2L & _BOREN_ON_2L & _BORV_2_2L  ;Reset
Warning[230]: __CONFIG has been deprecated for PIC18 devices.  Use directive CONFIG.
300002 FEF2           00016         __CONFIG  _CONFIG2H, _WDT_OFF_2H  ;Watchdog timer disabled
Warning[230]: __CONFIG has been deprecated for PIC18 devices.  Use directive CONFIG.
300004 FFFF           00017         __CONFIG  _CONFIG3H, _CCP2MX_PORTC_3H  ;CCP2 to RC1 (rather than to RB3)
Warning[230]: __CONFIG has been deprecated for PIC18 devices.  Use directive CONFIG.
300006 FFBB           00018         __CONFIG  _CONFIG4L, _LVP_OFF_4L & _XINST_OFF_4L  ;RB5 enabled for I/O
                      00019         errorlevel -314, -315          ;Ignore lfsr messages
                      00020 
                      00021 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00022 
                      00023         cblock  0x000                  ;Beginning of Access RAM
  00000000            00024         VAR_1                      ;Define variables as needed
  00000001            00025                 X0L     ; lower bit of first incoming signal
  00000002            00026                 X0H             ; upper bit of first incoming sigmal
  00000003            00027                 X1L             ; ''
  00000004            00028                 X1H             ; ''
  00000005            00029                 X2L
  00000006            00030                 X2H
  00000007            00031                 X3L
  00000008            00032                 X3H
  00000009            00033                 SUML    ; lower bits of summation
  0000000A            00034                 SUMH    ; upper bits of summation
  0000000B            00035                 FINALSUM ; total 8 bits to be passed into DAC
                      00036 
  0000000C            00037         TMR0LCOPY                      ;Copy of sixteen-bit Timer0 used by LoopTime
  0000000D            00038         TMR0HCOPY
  0000000E            00039         INTCONCOPY                     ;Copy of INTCON for LoopTime subroutine
  0000000F            00040         COUNT                          ;Counter available as local to subroutines
  00000010            00041         ALIVECNT                       ;Counter for blinking "Alive" LED
  00000011            00042         BYTE                           ;Eight-bit byte to be displayed
  00000012            00043         BYTESTR:10                     ;Display string for binary version of BYTE
  0000001C            00044                 MSNUM
  0000001D            00045                 LSNUM
                      00046         endc
                      00047 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 
                      00049 MOVLF   macro  literal,dest
                      00050         movlw  literal
                      00051         movwf  dest
                      00052         endm
                      00053 
                      00054 POINT   macro  stringname
                      00055         MOVLF  high stringname, TBLPTRH
                      00056         MOVLF  low stringname, TBLPTRL
                      00057         endm
                      00058 
                      00059 DISPLAYBOT macro  register
                      00060         movff  register,BYTE
                      00061         call  ByteDisplayBOT
                      00062         endm
                      00063 
                      00064 DISPLAYTOP macro  register
                      00065         movff  register,BYTE
                      00066         call  ByteDisplayTOP
                      00067         endm
                      00068 
                      00069 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00070 
000000                00071         org  0x0000                    ;Reset vector
000000 0000           00072         nop 
000002 EF0E F000      00073         goto  Mainline
                      00074 
000008                00075         org  0x0008                    ;High priority interrupt vector
000008 EF04 F000      00076         goto  $                        ;Trap
                      00077 
000018                00078         org  0x0018                    ;Low priority interrupt vector
000018 EF0C F000      00079         goto  $                        ;Trap
                      00080 
                      00081 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00082 ; NOTE ---------------------------------------------
                      00083 ; Write your code for AD-DA here
                      00084 ; Create Subroutines to make code transparent and easier to debug
00001C                00085 Mainline
00001C D844           00086         rcall  Initial                 ;Initialize everything           
                      00087                 
00001E                00088 L1
                      00089                 MOVLF  B'00011111',ADCON0          ; initialize ADCON0
00001E 0E1F               M         movlw  B'00011111'
000020 6EC2               M         movwf  ADCON0
000022                00090 ADWAIT
000022 B2C2           00091                 btfsc ADCON0, 1         ; check if AD == 0, skip the next line
000024 D7FE           00092                 bra ADWAIT                      ; wait for Analog signal to finish reading
                      00093 
                      00094 ; MEMORY BUFFER (for 3rd degree averging filter)
                      00095 
000026 C005 F007      00096                 movff X2L, X3L          ; shift X2 contents to X3 memory location
00002A C006 F008      00097                 movff X2H, X3H
                      00098 
00002E C003 F005      00099                 movff X1L, X2L          ; shift X1 contents to X2 memory location
000032 C004 F006      00100                 movff X1H, X2H
                      00101 
000036 C001 F003      00102                 movff X0L, X1L          ; shift X0 contents to X1 memory location
00003A C002 F004      00103                 movff X0H, X1H
                      00104                 
00003E CFC3 F001      00105                 movff ADRESL, X0L       ; fill X0 memory location with contents of ADRES
000042 CFC4 F002      00106                 movff ADRESH, X0H       ; ADRES is filled by ADCON
                      00107 
                      00108 ; ADDER
                      00109 
000046 C001 F009      00110                 movff X0L, SUML         ; SUM = contents of X0 
00004A C002 F00A      00111                 movff X0H, SUMH
                      00112 
00004E 5009           00113                 movf SUML, W            ; SUM += X1
000050 2403           00114                 addwf X1L, W
000052 6E09           00115                 movwf SUML
                      00116 
000054 500A           00117                 movf SUMH, W
000056 2004           00118                 addwfc X1H, W
000058 6E0A           00119                 movwf SUMH
                      00120 
00005A 5009           00121                 movf SUML, W            ; SUM += X2
00005C 2405           00122                 addwf X2L, W
00005E 6E09           00123                 movwf SUML
                      00124 
000060 500A           00125                 movf SUMH, W
000062 2006           00126                 addwfc X2H, W
000064 6E0A           00127                 movwf SUMH
                      00128 
000066 5009           00129                 movf SUML, W            ; SUM += X3
000068 2407           00130                 addwf X3L, W
00006A 6E09           00131                 movwf SUML
                      00132 
00006C 500A           00133                 movf SUMH, W
00006E 2008           00134                 addwfc X3H, W
000070 6E0A           00135                 movwf SUMH
                      00136 
                      00137 ; DIVIDER
000072 9009           00138                 bcf SUML, 0     ; set lower 4 bits of SUML to 0
000074 9209           00139                 bcf SUML, 1             ; primes SUML for Swap
000076 9409           00140                 bcf SUML, 2
000078 9609           00141                 bcf SUML, 3
00007A 3A09           00142                 swapf SUML,F    ; swap upper 4 bits with lower 4 bits of SUML
                      00143 
00007C 980A           00144                 bcf SUMH, 4             ; set upper 4 bits of SUMH to 0
00007E 9A0A           00145                 bcf SUMH, 5             ; primes SUMH for swap
000080 9C0A           00146                 bcf SUMH, 6
000082 9E0A           00147                 bcf SUMH, 7
000084 3A0A           00148                 swapf SUMH,F    ; swap lower 4 bits with upper 4 bits of SUMH
                      00149 
000086 5009           00150                 movf SUML, W            
000088 240A           00151                 addwf SUMH, W 
00008A 6E0B           00152                 movwf FINALSUM ; FINALSUM contains the 8 bits that needs to be passed into the DAC
                      00153 
00008C 9082           00154                 bcf PORTC, RC0  
00008E 969E           00155                 bcf PIR1, SSPIF
                      00156                 MOVLF 0x21,SSPBUF   ; move channel 1 to SSPBUF
000090 0E21               M         movlw  0x21
000092 6EC9               M         movwf  SSPBUF
000094                00157 WAIT
000094 A69E           00158                 btfss PIR1,SSPIF        ; check if SSPIF == 1 
000096 D7FE           00159                 bra WAIT                        ; WAIT IF SSPIF == 1
000098 969E           00160                 bcf PIR1, SSPIF
                      00161                 ;movff ADRESH, SSPBUF
                      00162         ;       movff SUML, SSPBUF
                      00163         ;       movff SUMH, SSPBUF
00009A C00B FFC9      00164                 movff FINALSUM, SSPBUF  ; put FINALSUM into SSBUF
                      00165 
00009E                00166 WAIT2
00009E A69E           00167                 btfss PIR1,SSPIF        ; check if SSPIF == 1 
0000A0 D7FE           00168                 bra WAIT2                       ; WAIT IF SSPIF == 1
0000A2 8082           00169                 bsf PORTC, RC0
                      00170 
0000A4 D7BC           00171         bra     L1
                      00172 
                      00173 
                      00174 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00175 ;
                      00176 ; This subroutine performs all initializations of variables and registers.
                      00177 
0000A6                00178 Initial
                      00179         MOVLF  B'10001110',ADCON1      ;Enable PORTA & PORTE digital I/O pins
0000A6 0E8E               M         movlw  B'10001110'
0000A8 6EC1               M         movwf  ADCON1
                      00180                 MOVLF  B'10000100',ADCON2          ;Right Justification
0000AA 0E84               M         movlw  B'10000100'
0000AC 6EC0               M         movwf  ADCON2
                      00181         MOVLF  B'11100001',TRISA       ;Set I/O for PORTA
0000AE 0EE1               M         movlw  B'11100001'
0000B0 6E92               M         movwf  TRISA
                      00182         MOVLF  B'11011100',TRISB       ;Set I/O for PORTB
0000B2 0EDC               M         movlw  B'11011100'
0000B4 6E93               M         movwf  TRISB
                      00183         MOVLF  B'11010000',TRISC       ;Set I/0 for PORTC
0000B6 0ED0               M         movlw  B'11010000'
0000B8 6E94               M         movwf  TRISC
                      00184         MOVLF  B'00001111',TRISD       ;Set I/O for PORTD
0000BA 0E0F               M         movlw  B'00001111'
0000BC 6E95               M         movwf  TRISD
                      00185         MOVLF  B'00000100',TRISE       ;Set I/O for PORTE
0000BE 0E04               M         movlw  B'00000100'
0000C0 6E96               M         movwf  TRISE
                      00186         MOVLF  B'10001000',T0CON       ;Set up Timer0 for a looptime of 10 ms
0000C2 0E88               M         movlw  B'10001000'
0000C4 6ED5               M         movwf  T0CON
                      00187         MOVLF  B'00010000',PORTA       ;Turn off all four LEDs driven from PORTA
0000C6 0E10               M         movlw  B'00010000'
0000C8 6E80               M         movwf  PORTA
                      00188                 MOVLF  B'00100000',SSPCON1         ; Iniitialize SSPCON1
0000CA 0E20               M         movlw  B'00100000'
0000CC 6EC6               M         movwf  SSPCON1
                      00189                 MOVLF  B'11000000',SSPSTAT         ; initialize SSPSTATE
0000CE 0EC0               M         movlw  B'11000000'
0000D0 6EC7               M         movwf  SSPSTAT
                      00190 
                      00191                 MOVLF  B'00000000', X0L
0000D2 0E00               M         movlw  B'00000000'
0000D4 6E01               M         movwf  X0L
                      00192                 MOVLF  B'00000000', X0H
0000D6 0E00               M         movlw  B'00000000'
0000D8 6E02               M         movwf  X0H
                      00193                 MOVLF  B'00000000', X1L
0000DA 0E00               M         movlw  B'00000000'
0000DC 6E03               M         movwf  X1L
                      00194                 MOVLF  B'00000000', X1H
0000DE 0E00               M         movlw  B'00000000'
0000E0 6E04               M         movwf  X1H
                      00195                 MOVLF  B'00000000', X2L
0000E2 0E00               M         movlw  B'00000000'
0000E4 6E05               M         movwf  X2L
                      00196                 MOVLF  B'00000000', X2H
0000E6 0E00               M         movlw  B'00000000'
0000E8 6E06               M         movwf  X2H
                      00197                 MOVLF  B'00000000', X3L
0000EA 0E00               M         movlw  B'00000000'
0000EC 6E07               M         movwf  X3L
                      00198                 MOVLF  B'00000000', X3H
0000EE 0E00               M         movlw  B'00000000'
0000F0 6E08               M         movwf  X3H
                      00199                 MOVLF  B'00000000', SUML
0000F2 0E00               M         movlw  B'00000000'
0000F4 6E09               M         movwf  SUML
                      00200                 MOVLF  B'00000000', SUMH
0000F6 0E00               M         movlw  B'00000000'
0000F8 6E0A               M         movwf  SUMH
                      00201                 MOVLF  B'00000000', FINALSUM
0000FA 0E00               M         movlw  B'00000000'
0000FC 6E0B               M         movwf  FINALSUM
                      00202 
0000FE D801           00203                 rcall  InitLCD
000100 0012           00204         return
                      00205 
                      00206 ;;;;;;; InitLCD subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00207 ;
                      00208 ; Initialize the Optrex 8x2 character LCD.
                      00209 ; First wait for 0.1 second, to get past display's power-on reset time.
                      00210 
000102                00211 InitLCD
                      00212         MOVLF  10,COUNT                ;Wait 0.1 second
000102 0E0A               M         movlw  10
000104 6E0F               M         movwf  COUNT
                      00213         ;REPEAT_
000106                00214 L2
000106 D83C           00215           rcall  LoopTime              ;Call LoopTime 10 times
000108 060F           00216           decf  COUNT,F
                      00217         ;UNTIL_  .Z.
00010A E1FD           00218         bnz     L2
00010C                00219 RL2
                      00220 
00010C 9084           00221         bcf  PORTE,0                   ;RS=0 for command
                      00222         POINT  LCDstr                  ;Set up table pointer to initialization string
                          M         MOVLF  high LCDstr,     TBLPTRH
00010E 0E01               M         movlw  high LCDstr
000110 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low LCDstr,     TBLPTRL
000112 0EF0               M         movlw  low LCDstr
000114 6EF6               M         movwf  TBLPTRL
000116 0008           00223         tblrd*                         ;Get first byte from string into TABLAT
                      00224         ;REPEAT_
000118                00225 L3
000118 8284           00226           bsf  PORTE,1                 ;Drive E high
00011A CFF5 FF83      00227           movff  TABLAT,PORTD          ;Send upper nibble
00011E 9284           00228           bcf  PORTE,1                 ;Drive E low so LCD will process input
000120 D82F           00229           rcall  LoopTime              ;Wait ten milliseconds
000122 8284           00230           bsf  PORTE,1                 ;Drive E high
000124 38F5           00231           swapf  TABLAT,W              ;Swap nibbles
000126 6E83           00232           movwf  PORTD                 ;Send lower nibble
000128 9284           00233           bcf  PORTE,1                 ;Drive E low so LCD will process input
00012A D82A           00234           rcall  LoopTime              ;Wait ten milliseconds
00012C 000B           00235           tblrd+*                      ;Increment pointer and get next byte
00012E 52F5           00236           movf  TABLAT,F               ;Is it zero?
                      00237         ;UNTIL_  .Z.
000130 E1F3           00238         bnz     L3
000132                00239 RL3
000132 0012           00240         return
                      00241 
                      00242 ;;;;;;; T40 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00243 ;
                      00244 ; Pause for 40 microseconds  or 40/0.4 = 100 clock cycles.
                      00245 ; Assumes 10/4 = 2.5 MHz internal clock rate.
                      00246 
000134                00247 T40
000134 0E21           00248         movlw  100/3                   ;Each REPEAT loop takes 3 cycles
000136 6E0F           00249         movwf  COUNT
                      00250         ;REPEAT_
000138                00251 L4
000138 060F           00252           decf  COUNT,F
                      00253         ;UNTIL_  .Z.
00013A E1FE           00254         bnz     L4
00013C                00255 RL4
00013C 0012           00256         return
                      00257 
                      00258 
                      00259 ;;;;;;;;DisplayC subroutine;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00260 ;
                      00261 ; This subroutine is called with TBLPTR containing the address of a constant
                      00262 ; display string.  It sends the bytes of the string to the LCD.  The first
                      00263 ; byte sets the cursor position.  The remaining bytes are displayed, beginning
                      00264 ; at that position.
                      00265 ; This subroutine expects a normal one-byte cursor-positioning code, 0xhh, or
                      00266 ; an occasionally used two-byte cursor-positioning code of the form 0x00hh.
                      00267 
00013E                00268 DisplayC
00013E 9084           00269         bcf  PORTE,0                   ;Drive RS pin low for cursor-positioning code
000140 0008           00270         tblrd*                         ;Get byte from string into TABLAT
000142 52F5           00271         movf  TABLAT,F                 ;Check for leading zero byte
                      00272         ;IF_  .Z.
000144 E101           00273         bnz     L5
000146 000B           00274           tblrd+*                      ;If zero, get next byte
                      00275         ;ENDIF_
000148                00276 L5
                      00277         ;REPEAT_
000148                00278 L6
000148 8284           00279           bsf  PORTE,1                 ;Drive E pin high
00014A CFF5 FF83      00280           movff  TABLAT,PORTD          ;Send upper nibble
00014E 9284           00281           bcf  PORTE,1                 ;Drive E pin low so LCD will accept nibble
000150 8284           00282           bsf  PORTE,1                 ;Drive E pin high again
000152 38F5           00283           swapf  TABLAT,W              ;Swap nibbles
000154 6E83           00284           movwf  PORTD                 ;Write lower nibble
000156 9284           00285           bcf  PORTE,1                 ;Drive E pin low so LCD will process byte
000158 DFED           00286           rcall  T40                   ;Wait 40 usec
00015A 8084           00287           bsf  PORTE,0                 ;Drive RS pin high for displayable characters
00015C 000B           00288           tblrd+*                      ;Increment pointer, then get next byte
00015E 52F5           00289           movf  TABLAT,F               ;Is it zero?
                      00290         ;UNTIL_  .Z.
000160 E1F3           00291         bnz     L6
000162                00292 RL6
000162 0012           00293         return
                      00294 
                      00295 ;;;;;;; DisplayV subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00296 ;
                      00297 ; This subroutine is called with FSR0 containing the address of a variable
                      00298 ; display string.  It sends the bytes of the string to the LCD.  The first
                      00299 ; byte sets the cursor position.  The remaining bytes are displayed, beginning
                      00300 ; at that position.
                      00301 
000164                00302 DisplayV
000164 9084           00303         bcf  PORTE,0                   ;Drive RS pin low for cursor positioning code
                      00304         ;REPEAT_
000166                00305 L7
000166 8284           00306           bsf  PORTE,1                 ;Drive E pin high
000168 CFEF FF83      00307           movff  INDF0,PORTD           ;Send upper nibble
00016C 9284           00308           bcf  PORTE,1                 ;Drive E pin low so LCD will accept nibble
00016E 8284           00309           bsf  PORTE,1                 ;Drive E pin high again
000170 38EF           00310           swapf  INDF0,W               ;Swap nibbles
000172 6E83           00311           movwf  PORTD                 ;Write lower nibble
000174 9284           00312           bcf  PORTE,1                 ;Drive E pin low so LCD will process byte
000176 DFDE           00313           rcall  T40                   ;Wait 40 usec
000178 8084           00314           bsf  PORTE,0                 ;Drive RS pin high for displayable characters
00017A 50EC           00315           movf  PREINC0,W              ;Increment pointer, then get next byte
                      00316         ;UNTIL_  .Z.                   ;Is it zero?
00017C E1F4           00317         bnz     L7
00017E                00318 RL7
00017E 0012           00319         return
                      00320 
                      00321 ;;;;;;; LoopTime subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00322 ;
                      00323 ; This subroutine waits for Timer0 to complete its ten millisecond count
                      00324 ; sequence. It does so by waiting for sixteen-bit Timer0 to roll over. To obtain
                      00325 ; a period of precisely 10000/0.4 = 25000 clock periods, it needs to remove
                      00326 ; 65536-25000 or 40536 counts from the sixteen-bit count sequence.  The
                      00327 ; algorithm below first copies Timer0 to RAM, adds "Bignum" to the copy ,and
                      00328 ; then writes the result back to Timer0. It actually needs to add somewhat more
                      00329 ; counts to Timer0 than 40536.  The extra number of 12+2 counts added into
                      00330 ; "Bignum" makes the precise correction.
                      00331 
  00009E66            00332 Bignum  equ     65536-25000+12+2
                      00333 
000180                00334 LoopTime
                      00335         ;REPEAT_
000180                00336 L9
                      00337         ;UNTIL_  INTCON,TMR0IF == 1    ;Wait until ten milliseconds are up
000180 A4F2           00338         btfss INTCON,TMR0IF
000182 D7FE           00339         bra     L9
000184                00340 RL9
000184 CFF2 F00E      00341         movff  INTCON,INTCONCOPY       ;Disable all interrupts to CPU
000188 9EF2           00342         bcf  INTCON,GIEH
00018A CFD6 F00C      00343         movff  TMR0L,TMR0LCOPY         ;Read 16-bit counter at this moment
00018E CFD7 F00D      00344         movff  TMR0H,TMR0HCOPY
000192 0E66           00345         movlw  low  Bignum
000194 260C           00346         addwf  TMR0LCOPY,F
000196 0E9E           00347         movlw  high  Bignum
000198 220D           00348         addwfc  TMR0HCOPY,F
00019A C00D FFD7      00349         movff  TMR0HCOPY,TMR0H
00019E C00C FFD6      00350         movff  TMR0LCOPY,TMR0L         ;Write 16-bit counter at this moment
0001A2 500E           00351         movf  INTCONCOPY,W             ;Restore GIEH interrupt enable bit
0001A4 0B80           00352         andlw  B'10000000'
0001A6 12F2           00353         iorwf  INTCON,F
0001A8 94F2           00354         bcf  INTCON,TMR0IF             ;Clear Timer0 flag
0001AA 0012           00355         return
                      00356 
                      00357 
                      00358 ;;;;;;; ByteDisplay subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00359 ;
                      00360 ; Display whatever is in BYTE as a binary number.
                      00361 
0001AC                00362 ByteDisplayBOT
                      00363             ;POINT  BYTE_1                  ;Display "BYTE="
                      00364         ;rcall  DisplayC
0001AC EE00 F01A      00365         lfsr  0,BYTESTR+8
                      00366         ;REPEAT_
0001B0                00367 L10
0001B0 6AE8           00368           clrf  WREG
0001B2 3211           00369           rrcf  BYTE,F                 ;Move bit into carry
0001B4 36E8           00370           rlcf  WREG,F                 ;and from there into WREG
0001B6 0930           00371           iorlw  0x30                  ;Convert to ASCII
0001B8 6EED           00372           movwf  POSTDEC0              ; and move to string
0001BA 50E9           00373           movf  FSR0L,W                ;Done?
0001BC 0812           00374           sublw  low BYTESTR
                      00375         ;UNTIL_  .Z.
0001BE E1F8           00376         bnz     L10
0001C0                00377 RL10
                      00378 
0001C0 EE00 F012      00379         lfsr  0,BYTESTR                ;Set pointer to display string
                      00380         MOVLF  0xc0,BYTESTR            ;Add cursor-positioning code
0001C4 0EC0               M         movlw  0xc0
0001C6 6E12               M         movwf  BYTESTR
0001C8 6A1B           00381         clrf  BYTESTR+9                ;and end-of-string terminator
0001CA DFCC           00382         rcall  DisplayV
0001CC 0012           00383         return
                      00384 
0001CE                00385 ByteDisplayTOP
                      00386             ;POINT  BYTE_1                  ;Display "BYTE="
                      00387         ;rcall  DisplayC
0001CE EE00 F01A      00388         lfsr  0,BYTESTR+8
                      00389         ;REPEAT_
0001D2                00390 L11
0001D2 6AE8           00391           clrf  WREG
0001D4 3211           00392           rrcf  BYTE,F                 ;Move bit into carry
0001D6 36E8           00393           rlcf  WREG,F                 ;and from there into WREG
0001D8 0930           00394           iorlw  0x30                  ;Convert to ASCII
0001DA 6EED           00395           movwf  POSTDEC0              ; and move to string
0001DC 50E9           00396           movf  FSR0L,W                ;Done?
0001DE 0812           00397           sublw  low BYTESTR
                      00398         ;UNTIL_  .Z.
0001E0 E1F8           00399         bnz     L11
0001E2                00400 RL11
                      00401 
0001E2 EE00 F012      00402         lfsr  0,BYTESTR                ;Set pointer to display string
                      00403         MOVLF  0x80,BYTESTR            ;Add cursor-positioning code
0001E6 0E80               M         movlw  0x80
0001E8 6E12               M         movwf  BYTESTR
0001EA 6A1B           00404         clrf  BYTESTR+9                ;and end-of-string terminator
0001EC DFBB           00405         rcall  DisplayV
0001EE 0012           00406         return
                      00407 
                      00408 ;;;;;;; Constant strings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00409 
0001F0 3233 0128 060C 00410 LCDstr  db  0x33,0x32,0x28,0x01,0x0c,0x06,0x00  ;Initialization string for LCD
       0000 
0001F8 4280 5459 3D45 00411 BYTE_1  db  "\x80BYTE=   \x00"         ;Write "BYTE=" to first line of LCD
       2020 0020 
000202                00412 BarChars                               ;Bargraph user-defined characters
000202 4800           00413         db  0x00,0x48                  ;CGRAM-positioning code
000204 9090 9090 9090 00414         db  0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90  ;Column 1
       9090 
00020C 9898 9898 9898 00415         db  0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98  ;Columns 1,2
       9898 
000214 9C9C 9C9C 9C9C 00416         db  0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c  ;Columns 1,2,3
       9C9C 
00021C 9E9E 9E9E 9E9E 00417         db  0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e  ;Columns 1,2,3,4
       9E9E 
000224 9F9F 9F9F 9F9F 00418         db  0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f  ;Column 1,2,3,4,5
       9F9F 
00022C 0000           00419         db  0x00                       ;End-of-string terminator
                      00420 
                      00421         end

Errors   :     0
Warnings :     5 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

